

// This file contains functions used for raymarching in in-game materials, not for precomputing. 

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless I find a way
// to tell the shader compiler to always recompile the raymarch shaders on startup)

// Notice we're using FMaterialPixelParameters and Primitive, which are not defined by us anywhere. 
// Since this file is only used in materials, we know that these structs are defined and provided to us 
// by the magical shader compiler environment. Lurk through the generated HLSL file to see other nice 
// structs that can be stolen like this.

#pragma once

// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space.
float4 PerformRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters)
{
	// Get scene depth at this pixel.
	float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

	// Get camera forward vector in world space.
	float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

	// Get world space vector going from camera center to current scene depth.
	float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

	// Transform this vector into the box's local space
	WorldDepthVec = mul(WorldDepthVec, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal);

	// Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
	LocalSceneDepth = length(WorldDepthVec);

	// We use unit cubes now, uncomment this if you want to use non-unit meshes for some reason.
	LocalSceneDepth /= (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax.x * 2);

	// Account for difference between camera center vector and camera-to-pixel depth
	LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

	// Get cam pos and vector into local space too.
	float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000),
	                         GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal).xyz;
	float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector,
	                                    GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal));

	// Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]).
	LocalCamPos += 0.5;
	float3 InverseRayDirVec = 1 / LocalCamVec;

	// Because now we're in texture space where our box is at [0, 1] on each axis, it's easy to get intersections.
	// LowIntersections will have the distance of the ray in X,Y,Z when it hits 0 on the respective axis.
	// HighIntersections will have the distance of the ray in X,Y,Z when it reaches 1 on the respective axis.
	float3 LowIntersections = (0 - LocalCamPos) * InverseRayDirVec;
	float3 HighIntersections = (1 - LocalCamPos) * InverseRayDirVec;

	// Get closest and furthest intersections
	float3 ClosestIntersections = min(LowIntersections, HighIntersections);
	float3 FurthestIntersections = max(LowIntersections, HighIntersections);

	// The actual intersections of the box are the 2 values in the middle of the pack.
	// T0 (entry) = the farthest of the closest intersections
	float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
	// T1 (exit) = the closest of the furthest intersections
	float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

	// Make sure the entry point is not behind the camera
	t0 = max(0, t0);

	// Make sure the exit point is not behind other scene geometry.
	t1 = min(t1, LocalSceneDepth);

	// Calculate box thickness at this pixel (in local space).
	float BoxThickness = max(0, t1 - t0);

	// Get entry position in UVW space.
	float3 EntryPos = LocalCamPos + t0 * LocalCamVec;

	return float4(EntryPos, BoxThickness);
}

// Jitter position by random temporal jitter (in a random direction perpendicular to the camera vector).
void JitterEntryPos(inout float3 EntryPos, float3 LocalCamVec, float JitterRadius, FMaterialPixelParameters MaterialParameters)
{
	float2 pos = frac(MaterialParameters.SvPosition.xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	float rand1 = frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f))) - 0.5f;
	int3 RandomPos = int3(MaterialParameters.SvPosition.xy, View.StateFrameIndexMod8);
	float rand2 = (float)(Rand3DPCG16(RandomPos).x) / 0xffff - 0.5f;

	float3 Axis1;
	float3 Axis2;
	FindBestAxisVectors(LocalCamVec, Axis1, Axis2);
	EntryPos += (Axis1 * rand1 + Axis2 * rand2) * JitterRadius;
}

// Jitter position by random temporal jitter (in the direction of the camera).
void JitterEntryPosCamDir(inout float3 EntryPos, float3 LocalCamVec, float JitterRadius, FMaterialPixelParameters MaterialParameters)
{
	int3 RandomPos = int3(MaterialParameters.SvPosition.xy, View.StateFrameIndexMod8);
	float rand = (float)(Rand3DPCG16(RandomPos).x) / 0xffff;
	EntryPos -= LocalCamVec * rand * JitterRadius;
}

// Samples the volume at next raymarch step.
// Notice "Material.Clamp_WorldGroupSettings" used as a sampler. These are UE shared samplers.
float GetRaymarchStepSample(float3 CurPos, float TimePassedPercentage, Texture3D DataVolumeT0,
	SamplerState DataVolumeSamplerT0, Texture3D DataVolumeT1, SamplerState DataVolumeSamplerT1)
{
	float VolumeSampleT0 = DataVolumeT0.SampleLevel(DataVolumeSamplerT0, saturate(CurPos), 0).r;
	float VolumeSampleT1 = DataVolumeT1.SampleLevel(DataVolumeSamplerT1, saturate(CurPos), 0).r;
	float TimeInterpSample = TimePassedPercentage * VolumeSampleT1 + (1 - TimePassedPercentage) * VolumeSampleT0;
	// Todo: Correct the alpha value (sample) according to the direction the volume gets traced
	return TimeInterpSample;
}