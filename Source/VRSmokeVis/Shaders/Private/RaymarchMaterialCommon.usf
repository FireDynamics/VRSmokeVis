// Copyright 2021 Tomas Bartipan and Technical University of Munich.
// Licensed under MIT license - See License.txt for details.
// Special credits go to : Temaran (compute shader tutorial), TheHugeManatee (original concept, supervision) and Ryan Brucks
// (original raymarching code).

// This file contains functions used for raymarching in in-game materials, not for precomputing. 

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless I find a way
// to tell the shadercompiler to always recompile the raymarch shaders on startup)

// Notice we're using FMaterialPixelParameters and Primitive, which are not defined by us anywhere. 
// Since this file is only used in materials, we know that these structs are defined and provided to us 
// by the magical shader compiler environment. Lurk through the generated HLSL file to see other nice 
// structs that can be stolen like this.

#pragma once

#include "RaymarcherCommon.usf"

// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space.
float4 PerformRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));
    
    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);
    
    // We use unit cubes now, uncomment this if you want to use non-unit meshes for some reason.
    // LocalSceneDepth /= (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax.x * 2);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), (GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)).xyz;
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal));

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]).
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;

    // Because now we're in texture space where our box is at [0, 1] on each axis, it's easy to get intersections.
    // LowIntersections will have the distance of the ray in X,Y,Z when it hits 0 on the respective axis.
    // HighIntersections will have the distance of the ray in X,Y,Z when it reaches 1 on the respective axis.
    float3 LowIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 HighIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Get closest and furthest intersections
    float3 ClosestIntersections = min(LowIntersections, HighIntersections);
    float3 FurthestIntersections = max(LowIntersections, HighIntersections);

    // The actual intersections of the box are the 2 values in the middle of the pack.
    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in UVW space.
    float3 EntryPos = LocalCamPos + (t0 * LocalCamVec);
    
    return float4(EntryPos, BoxThickness);
}


// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space.
// Can scale the cube to act as if it was smaller/larger than your actual mesh.
float4 PerformExperimentalRaymarchCubeSetup(FMaterialPixelParameters MaterialParameters, out float4 EntryPos, out float3 ExitPos, in float Scaling)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);
    // LocalSceneDepth /= (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax.x * 2);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), (GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal) * Scaling).xyz;
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal));

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5; //  ((LocalCamPos / (GetPrimitiveData(MaterialParameters.PrimitiveId).LocalObjectBoundsMax * 2))) + 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;

    // Because now we're in texture space where our box is at [0, 1] in each axis, it's easy to get intersections.
    // LowIntersections will have the distance of the ray in X,Y,Z before it hits the respective axis.
    // HighIntersections will have the distance of the ray in X,Y,Z before it reaches 1 in the respective axis.
    float3 LowIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 HighIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Get closest and furthest intersections
    float3 ClosestIntersections = min(LowIntersections, HighIntersections);
    float3 FurthestIntersections = max(LowIntersections, HighIntersections);

    // The actual intersections of the box are the 2 values in the middle of the pack.
    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth * Scaling);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in UVW space.
    EntryPos.xyz = LocalCamPos + (t0 * LocalCamVec);
    EntryPos.a = BoxThickness;
    ExitPos = LocalCamPos + (t1 * LocalCamVec);

    return EntryPos;
}

// Performs raymarch cube setup for this pixel. Returns the position of entry to the cube in rgb channels 
// and thickness of the cube in alpha. All values returned are in UVW space. 
// This setup is for performing the setup from a shader that's NOT run on the cube itself, it takes the
// cube's transform as a parameter. So you could theoretically just have a full-screen quad and give input an
// arbitrary transform and this will make it appear that the cube is at that transform.
float4 PerformOffsetRaymarchCubeSetup(float4x4 CubeTransformW2L, FMaterialPixelParameters MaterialParameters)
{
    // Get scene depth at this pixel.
    float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));

    // Get camera forward vector in world space.
    float3 CameraFWDVecWorld = mul(float3(0.00000000, 0.00000000, 1.00000000), ResolvedView.ViewToTranslatedWorld);

    // Get world space vector going from camera center to current scene depth.
    float3 WorldDepthVec = normalize(MaterialParameters.CameraVector) * LocalSceneDepth;

    // Transform this vector into the box's local space
    WorldDepthVec = mul(WorldDepthVec, CubeTransformW2L);

    // Get actual depth in local space, account for mesh bounds (by default, we use a centered 1x1x1 cube mesh, so this is unnecessary)
    LocalSceneDepth = length(WorldDepthVec);

    // Account for difference between camera center vector and camera-to-pixel depth
    LocalSceneDepth /= abs(dot(CameraFWDVecWorld, MaterialParameters.CameraVector));

    // Get cam pos and vector into local space too.
    float3 LocalCamPos = mul(float4(ResolvedView.WorldCameraOrigin, 1.00000000), CubeTransformW2L).xyz;
    float3 LocalCamVec = -normalize(mul(float4(ResolvedView.WorldCameraOrigin + MaterialParameters.CameraVector, 1.00000000), CubeTransformW2L).xyz - LocalCamPos);

    // Transform camera pos from local to UVW coords (from +-0.5 to [0 - 1]). Again, The LocalObjectBoundsMax only have an effect if using a non-default cube mesh.
    LocalCamPos += 0.5;
    float3 InverseRayDirVec = 1 / LocalCamVec;
       
    // Get intersections
    float3 FirstIntersections = (0 - LocalCamPos) * InverseRayDirVec;
    float3 SecondIntersections = (1 - LocalCamPos) * InverseRayDirVec;

    // Find closest and furthest intersections
    float3 ClosestIntersections = min(FirstIntersections, SecondIntersections);
    float3 FurthestIntersections = max(FirstIntersections, SecondIntersections);

    // T0 (entry) = the farthest of the closest intersections
    float t0 = max(ClosestIntersections.x, max(ClosestIntersections.y, ClosestIntersections.z));
    // T1 (exit) = the closest of the furthest intersections
    float t1 = min(FurthestIntersections.x, min(FurthestIntersections.y, FurthestIntersections.z));

    // Make sure the entry point is not behind the camera
    t0 = max(0, t0);

    // Make sure the exit point is not behind other scene geometry.
    t1 = min(t1, LocalSceneDepth);

    // Calculate box thickness at this pixel (in local space).
    float BoxThickness = max(0, t1 - t0);

    // Get entry position in local space.
    float3 EntryPos = LocalCamPos + (t0 * LocalCamVec);
    
    return float4(EntryPos, BoxThickness);
}

// Gets color from a uint label value.
// Switches on G8 will be faster than reading a full color volume. Also we need to export the labels eventually and color might not be the best way to do that.
// So labels are kept as G8 format.
float4 GetColorFromLabelValue(uint LabelValue)
{
    switch (LabelValue)
    {
        case 0: // Clear 
            return float4(0.0f, 0.0f, 0.0f, 0.0f);
        case 1: // Risk
            return float4(1.0f, 0.0f, 0.0f, 0.5f);
        case 2: // Target
            return float4(0.0f, 1.0f, 0.0f, 0.5f);
        default: // Unknown - return full black so bugs are obvious.
            return float4(0.0f, 0.0f, 0.0f, 1.0f);
    }
}

// Gets color from a uint label value. Used in UI functions.
// Switches on G8 will be faster than reading a full color volume. Also we need to export the labels eventually and color might not be the best way to do that.
// So labels are kept as G8 format.

float4 GetColorFromLabelValueUI(uint LabelValue)
{
    switch (LabelValue)
    {
        case 1: // Risk
            return float4(1.0f, 0.0f, 0.0f, 0.5f);
        case 2: // Target
            return float4(0.0f, 1.0f, 0.0f, 0.5f);
        case 0: // Clear 
            return float4(0.0f, 0.0f, 0.0f, 0.0f);
        case 255: // maybe?
            return float4(0.0f, 0.0f, 1.0f, 1.0f);
        default: // Unknown - return full black so bugs are visible.
            return float4(0.0f, 0.0f, 0.0f, 1.0f);
    }
}

// Samples a Label volume, gets the corresponding color and corrects the opacity to account for StepSize.
float4 SampleLabelVolume(float3 CurPos, float StepSize, Texture3D Volume)
{
    int x, y, z;
    Volume.GetDimensions(x, y, z);
    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
    int3 Dimensions = int3(x - 1, y - 1, z - 1);
    // We don't want to interpolate here, use load instead of sample.
    float LabelValue = Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0)).r;
    float4 Color = GetColorFromLabelValue(FloatToChar(LabelValue));
    Color.a = 1.0 - pow(1.0 - Color.a, StepSize);
    return Color;
}


// Samples a Label volume, gets the corresponding color for UI and returns it.
float4 SampleLabelVolumeUI(float3 CurPos, float StepSize, Texture3D Volume)
{
    int x, y, z;
    Volume.GetDimensions(x, y, z);
    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
    int3 Dimensions = int3(x - 1, y - 1, z - 1);
    // We don't want to interpolate here, use load instead of sample.
    float LabelValue = Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0)).r;
    return GetColorFromLabelValueUI(FloatToChar(LabelValue));
}

// Version 3
float RandomNum(in float2 p)
{
    float2 K1 = float2(
        23.14069263277926, // e^pi (Gelfond's constant)
         2.665144142690225 // 2^sqrt(2) (Gelfond–Schneider constant)
    );
    return frac( cos( dot(p,K1) ) * 12345.6789 );
}

// Jitter position by random temporal jitter (in the direction of the camera).
void JitterEntryPos(inout float3 EntryPos, float3 LocalCamVec, FMaterialPixelParameters MaterialParameters)
{
    int3 RandomPos = int3(MaterialParameters.SvPosition.xy, View.StateFrameIndexMod8);
    float rand = float(Rand3DPCG16(RandomPos).x) / 0xffff;
    EntryPos -= LocalCamVec * rand;
}


// Adds current sampled color and opacity to the accumulated LightEnergy
void AccumulateLightEnergy(inout float4 LightEnergy, in float4 CurrentSample)
{
    // Affect the color depending on how much opaque the current sample is and how strong the existing accumulated Light Energy is.
    LightEnergy.rgb = LightEnergy.rgb + (CurrentSample.rgb * CurrentSample.a * (1.0 - LightEnergy.a));
    // Affect the accumulated light energy strength.
    LightEnergy.a = LightEnergy.a + (CurrentSample.a * (1.0 - LightEnergy.a));
}

// Performs one raymarch step and accumulates the result to the existing Accumulated Light Energy.
// Notice "Material.Clamp_WorldGroupSettings" used as a sampler. These are UE shared samplers.
void AccumulateOneRaymarchStep(inout float4 AccumulatedLightEnergy, float3 CurPos, Texture3D DataVolume,
                               Texture2D TF, float2 TFIntensityDomain, float StepSize)
{
    // Sample intensity from the volume and get corresponding color-opacity from transfer function.
    // float4 ColorSample = SampleWindowedVolume(1, 100, 600, CurPos, StepSize, DataVolume, Material.Clamp_WorldGroupSettings, TF, Material.Clamp_WorldGroupSettings, TFIntensityDomain);
    float4 ColorSample = SampleDataVolume(CurPos, StepSize, DataVolume, Material.Wrap_WorldGroupSettings, TF, Material.Wrap_WorldGroupSettings, TFIntensityDomain);
    
    // Accumulate current colored sample to the final values.
    AccumulateLightEnergy(AccumulatedLightEnergy, ColorSample);
}


// Performs one raymarch step in a label volume and accumulates the result to the existing Accumulated Light Energy.
void AccumulateOneRaymarchLabelStep(inout float4 AccumulatedLightEnergy, float3 CurPos, Texture3D LabelVolume, float StepSize)
{
    // Sample intensity from the volume and get corresponding color-opacity from transfer function.
    float4 ColorSample = SampleLabelVolume(CurPos, StepSize, LabelVolume);
    // Accumulate colored label sample to the final values.
    AccumulateLightEnergy(AccumulatedLightEnergy, ColorSample);
}