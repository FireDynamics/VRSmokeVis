

#include "RaymarchMaterialCommon.usf"

int3 GetVolumeLoadingDimensions(Texture3D Volume)
{
	int x, y, z;
	Volume.GetDimensions(x, y, z);
	// Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
	// E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
	return int3(x - 1, y - 1, z - 1);
}

// Performs raymarch for the current pixel.
// CurPos = Entry Position, Thickness is thickness of cube along the ray. Both in UVW space.
// Actual number of steps taken is StepCount * Thickness. Material Parameters are provided by UE.
float PerformRaymarch(Texture3D DataVolumeT0, SamplerState DataVolumeSamplerT0,
                       Texture3D DataVolumeT1, SamplerState DataVolumeSamplerT1,
                       float3 CurPos, float Thickness, float StepCount, float TimePassedPercentage, float JitterRadius,
                       FMaterialPixelParameters MaterialParameters) 
{
	// const float Scale = length(TransformLocalVectorToWorld(MaterialParameters, float3(1.00000000,1.00000000,1.00000000)).xyz);
	// StepSize in UVW is inverse to StepCount.
	float StepSize = 1 / StepCount;// * Scale;

	// Get camera vector in local space and multiply it by step size.
	float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector,
										GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
	
	// Snap start positions to view aligned planes
	float LocalSceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(MaterialParameters)));
	float VolumeCenterDistance = length(ResolvedView.WorldCameraOrigin - GetPrimitiveData(MaterialParameters.PrimitiveId).ActorWorldPosition);
	float3 PlaneOffset = mul((LocalSceneDepth - VolumeCenterDistance) % StepSize, LocalCamVec);  // VolumeCenterDistance
	CurPos += PlaneOffset;
	Thickness -= PlaneOffset;
	
	// Actual number of steps to take to march through the full thickness of the cube at the ray position.
	float FloatActualSteps = StepCount * Thickness;
	// Number of full steps to take.
	const int MaxSteps = floor(FloatActualSteps);
	// Size of the last (not a full-sized) step.
	float FinalStep = frac(FloatActualSteps);

	// Jitter Entry position to avoid artifacts.
	if (JitterRadius > 0){
		JitterEntryPosCamDir(CurPos, LocalCamVec, JitterRadius, MaterialParameters);
	}

	// Initialize accumulated light energy.
	float LightEnergy = 1;
	for (int i = 0; i < MaxSteps; ++i)
	{
		LightEnergy *= GetRaymarchStepSample(CurPos, TimePassedPercentage, DataVolumeT0, DataVolumeSamplerT0, DataVolumeT1, DataVolumeSamplerT1);

		// Exit early if light energy is already very low (so future steps would have almost no impact on color).
		if (LightEnergy < 0.001f)
		{
			return 1;
		}

		// Move next step
		CurPos += LocalCamVec;
	}

	// Handle FinalStep
	CurPos += LocalCamVec * (FinalStep - 1);  // -1 to subtract the last LocalCamVec we added to CurPos in the loop
	// Multiply last sample by final step size to account for non-uniform step size here (although mathematically
	// this is not 100% correct)
	LightEnergy *= 1 - FinalStep * (1 - GetRaymarchStepSample(CurPos, TimePassedPercentage, DataVolumeT0, DataVolumeSamplerT0, DataVolumeT1, DataVolumeSamplerT1));
	
	return 1 - LightEnergy;
}
