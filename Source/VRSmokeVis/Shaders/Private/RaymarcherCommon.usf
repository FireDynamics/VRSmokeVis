// Copyright 2021 Tomas Bartipan and Technical University of Munich.
// Licensed under MIT license - See License.txt for details.
// Special credits go to : Temaran (compute shader tutorial), TheHugeManatee (original concept, supervision) and Ryan Brucks
// (original raymarching code).

#pragma once

// Convert a uint in one byte range (0-255) to a corresponding U8 float (0 - 1 normalized).
float CharToFloat(uint inChar)
{
    return (float)(inChar) / 255.0;
}

// Convert a normalized 0-1 float to a 0-255 uint;
uint FloatToChar(float inFloat)
{
    return round(inFloat * 255.0);
}

// Transforms pixel position into UVWs of the given pixel's center (center is why we add 0.5)
float3 GetUVW(uint3 pos, float3 dimensions)
{
    return (pos + float3(0.5, 0.5, 0.5)) / dimensions;
}

// Samples a Data volume and corrects the opacity to account for StepSize (in World units).
float4 SampleDataVolume(float3 CurPos, float StepSize, Texture3D Volume, SamplerState VolumeSampler)
{
    float VolumeSample = Volume.SampleLevel(VolumeSampler, saturate(CurPos), 0).r;

    float4 ColorSample = float4(1 - VolumeSample, 1 - VolumeSample, 1 - VolumeSample, VolumeSample);
    ColorSample.a = 1.0 - pow(1.0 - ColorSample.a, StepSize);
    return ColorSample;
}

// Samples a Data volume at CurPos and given LOD;
float SampleDataIntensityLoded(float3 CurPos, Texture3D Volume, SamplerState VolumeSampler, float LOD)
{
    return Volume.SampleLevel(VolumeSampler, saturate(CurPos), LOD).r;
}

// Returns intensity corrected for stepsize.
float CorrectForStepSize(float Intensity, float StepSize)
{
    return 1.0 - pow(1.0 - Intensity, StepSize);
}

float3 UVWToLocal(float3 UVW)
{
    return (UVW - 0.5) * 2;
}

float3 LocalToUVW(float3 Local)
{
    return Local / 2 + 0.5;
}

// Go from UVW coords to local coords of a unit cube (from [0, 1] to [-0.5, 0.5])
float3 UVWToUnitLocal(float3 UVW)
{
    return UVW - 0.5;
}


// Go from Local coords of a unit cube to UVW (from [-0.5, 0.5] to [0, 1])
float3 UnitLocaltoUVW(float3 Local)
{
    return Local + 0.5;
}